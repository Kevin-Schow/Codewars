Welcome. In this kata, you are asked to
square every digit of a number.
For example, if we run 9119 through the
function, 811181 will come out, because
92 is 81 and 12 is 1.

def square_digits(num):
    result = ''
    for digit in str(num):
        result += str(int(digit) * int(digit))
    return int(result)

def square_digits(num):
    return int(''.join(str(int(d)**2) for d in str(num)))

=========================================

Your task is to make a function that can take any non-negative
integer as a argument and return it with its digits in
descending order. Essentially, rearrange the digits to
create the highest possible number.


def descending_order(num):
    new_num = []
    result = ''
    for i in str(num):
        new_num += i
    new_num.sort(reverse=True)
    for j in new_num:
        result += j
    return int(result)

def Descending_Order(num):
    return int("".join(sorted(str(num), reverse=True)))

=========================================

A square of squares
You like building blocks. You especially like building
blocks that are squares. And what you even like more, is
to arrange them into a square of square building blocks!
However, sometimes, you cant arrange them into a square.
Instead, you end up with an ordinary rectangle! Those
blasted things! If you just had a way to know, whether
youre currently working in vainâ€¦ Wait! Thats it! You
just have to check if your number of building blocks
is a perfect square.

import math
def is_square(n):
        return (math.sqrt(n)).is_integer() if n >= 0 else False

import math
def is_square(n):
    return n > -1 and math.sqrt(n) % 1 == 0;

=========================================

Convert number to reversed array of digits
Given a random non-negative number, you have to
return the digits of this number within
an array in reverse order.


def digitize(n):
    array = []
    for i in str(n):
        array.insert(0, int(i))
    return array

def digitize(n):
    return map(int, str(n)[::-1])
